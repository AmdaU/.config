##########
# GLOBAL #
##########

global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def create_matrix(snip):
	if 'x' in snip.buffer[snip.line]:
		rows = snip.buffer[snip.line].split('x')[0]
		cols = snip.buffer[snip.line].split('x')[1]
		int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
		rows = int_val(rows)
		cols = int_val(cols)
		offset = cols + 1
		old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
		snip.buffer[snip.line] = ''
		final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
		for i in range(rows):
			final_str += old_spacing + '\t'
			final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
			final_str += " \\\\\\\n"
		final_str += old_spacing + "\\end{tabular}\n$0"
		snip.expand_anon(final_str)
	else:	
		rows = snip.buffer[snip.line]
		cols = 1
		int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
		rows = int_val(rows)
		offset = cols + 1
		old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
		snip.buffer[snip.line] = ''
		final_str = old_spacing + "\\cols{"
		for i in range(rows):
			final_str += old_spacing + '\t'
			final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
			final_str += " \\\\\\\n"
		final_str += old_spacing + "}\n$0"
		snip.expand_anon(final_str)
				

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"
	snip.expand_anon(final_str)
endglobal


###############
# ENVIRONMENT #
###############

snippet beg "begin{} / end{}" i
\begin{$1}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet cnt "Center" bi
\begin{center}
	${0:${VISUAL}}
\end{center}
endsnippet

snippet desc "Description" bi
\begin{description}
	\item[${1:${VISUAL}}] $0
\end{description}
endsnippet

snippet lemma "Lemma" bi
\begin{lemma}
	${0:${VISUAL}}
\end{lemma}
endsnippet

snippet prop "Proposition" bi
\begin{prop}[$1]
	${0:${VISUAL}}
\end{prop}
endsnippet

snippet thrm "Theorem" bi
\begin{theorem}[$1]
	${0:${VISUAL}}
\end{theorem}
endsnippet

snippet post "postulate" bi
\begin{postulate}[$1]
	${0:${VISUAL}}
\end{postulate}
endsnippet

snippet prf "Proof" bi
\begin{myproof}[$1]
	${0:${VISUAL}}
\end{myproof}
endsnippet

snippet def "Definition" bi
\begin{definition}[$1]
	${0:${VISUAL}}
\end{definition}
endsnippet

snippet nte "Note" bi
\begin{note}[$1]
	${0:${VISUAL}}
\end{note}
endsnippet

snippet prob "Problem" bi
\begin{problem}[$1]
	${0:${VISUAL}}
\end{problem}
endsnippet

snippet corl "Corollary" bi
\begin{corollary}[$1]
	${0:${VISUAL}}
\end{corollary}
endsnippet

snippet example "Example" bi
\begin{example}[$1]
	${0:${VISUAL}}
\end{example}
endsnippet

snippet notion "Notation" bi
\begin{notation}[$1]
	$0${VISUAL}
\end{notation}
endsnippet

snippet conc "Conclusion" bi
\begin{conclusion}[$1]
	$0${VISUAL}
\end{conclusion}
endsnippet

snippet fig "Figure environment" bi
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bi
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet item "Itemize" bi
\begin{itemize}
	\item ${0:${VISUAL}}
\end{itemize}
endsnippet

snippet case "cases" bi
\begin{cases}
	${0:${VISUAL}}
\end{cases}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	${0:${VISUAL}}
.\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
	\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
	$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}

	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

########
# MATH #
########

snippet cc "subset" w
\subset 
endsnippet

snippet inn "in " w
\in 
endsnippet

snippet Nn "cap" w
\cap 
endsnippet

snippet UU "cup" w
\cup 
endsnippet

snippet uuu "bigcup" w
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" w
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet HH "H" w
\mathds{H}
endsnippet

snippet DD "D" w
\mathds{D}
endsnippet

snippet '\\?frac; "Fraction" w
\frac{$1}{$2}$0
endsnippet

snippet compl "Complement" i
^{c}
endsnippet

snippet '\\?srt' "Square Root" ir
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet srto "... Root" wi
\sqrt[$1]{${2:${VISUAL}}}$0
endsnippet

snippet bf "Bold" wi
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet it "Italic" wi
\textit{${1:${VISUAL}}}$0
endsnippet

# snippet un "Underline" wi
# \un{${1:${VISUAL}}}$0
# endsnippet

snippet rm "Text" wi
\rm{${1:${VISUAL}}}$0
endsnippet

snippet itm "Item" wi
\item ${0:${VISUAL}}
endsnippet

snippet ceil "Ceil" w
\left\lceil $1 \right\rceil $0
endsnippet

snippet floor "Floor" w
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "Pmat" w
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "Bmat" w
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet () "Left( right)" w
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr) "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr} "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" wi
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet conj "conjugate" w
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet int "int" w
\int_{${1:0}}^{${2:\infty}}\dd ${3:x}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet => "Implies" w
\implies
endsnippet

snippet =< "Implied by" w
\impliedby
endsnippet

snippet iff "iff" w
\iff
endsnippet

snippet == "Equals" w
&= $1 \\\\
endsnippet

snippet != "Not Equal" w
\neq 
endsnippet

snippet <= "leq" Aw
\le 
endsnippet

snippet >= "geq" Aw
\ge 
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet lll "l" Aw
\ell
endsnippet

snippet xx "cross" Aw
\times 
endsnippet

snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

snippet <! "normal" Aw
\triangleleft 
endsnippet

snippet "(\d|\w)+invs" "inverse" Awr
`!p snip.rv = match.group(1)`^{-1}
endsnippet

snippet !> "mapsto" Aw
\mapsto 
endsnippet

##########
# TABLES #
#########

pre_expand "create_matrix(snip)"
snippet "matrix(\d+)(x(\d+))?" "matrix" r
endsnippet


pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet


###########
# POSTFIX #
###########

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet bar "bar" wi
\bar{${1:${VISUAL}}}$0
endsnippet

# snippet "\<(.*?)\|" "bra" Awri
# \bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
# endsnippet
# 
# snippet "\|(.*?)\>" "ket" Awri
# \ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
# endsnippet
# 
# snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" Awri
# `!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
# endsnippet


#############
# PRE-AMBLE #
#############

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet docls "Document Class" bA
\documentclass{$1}$0
endsnippet

snippet tmplt "Template"
\documentclass{article}

\usepackage{import}
\usepackage{pdfpages}
\usepackage{transparent}
\usepackage{xcolor}
$1

\newcommand{\incfig}[2][1]{%
		\def\svgwidth{#1\columnwidth}
		\import{./figures/}{#2.pdf_tex}
}
$2
\pdfsuppresswarningpagegroup=1

\begin{document}
		$0
\end{document}
endsnippet


#########
# OTHER #
#########

snippet acl "Acroynm expanded" bi
\acl{${1:acronym}}
endsnippet

snippet ac "Acroynm normal" bi
\ac{${1:acronym}}
endsnippet

snippet ni "Non-indented paragraph" bi
\noindent
endsnippet


############
# SECTIONS #
############

snippet chap "Chapter" wi
\chapter{$1${VISUAL}}
endsnippet

snippet sec "Section" wi
\section{$1${VISUAL}}
endsnippet

snippet sec* "Section*" wi
\section*{$1${VISUAL}}
endsnippet

snippet sub "Subsection" wi
\subsection{$1${VISUAL}}
endsnippet

snippet sub* "Subsection*" wi
\subsection*{$1${VISUAL}}
endsnippet

snippet subsub "Subsection" wi
\subsubsection{$1${VISUAL}}
endsnippet

snippet subsub* "Subsubsection" wi
\subsubsection*{$1${VISUAL}}
endsnippet

snippet par "Paragraph" wi
\paragraph{$1${VISUAL}}
endsnippet

snippet par* "Paragraph*" wi
\paragraph*{$1${VISUAL}}
endsnippet

snippet subpar "Sub Paragraph" wi
\subparagraph{$1${VISUAL}}
endsnippet

snippet subpar* "Sub Paragraph*" wi
\subparagraph*{$1${VISUAL}}
endsnippet

# vim:ft=snippets:

# =====================

priority 1

snippet mk "quick math" iA
$${1:${VISUAL}}$$0
endsnippet	

snippet dm "display mode" iA
\[ ${1:${VISUAL}} \]$0
endsnippet

snippet f "fraction" b
\frac{$1}{$2}$0
endsnippet

# snippet '([A-Za-z])_([^{}]*[^A-Za-z][^{}]) ' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

# snippet '([A-Za-z])_([A-Za-z]+) ' "text subscript" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = r"\rm "+match.group(2)`}
# endsnippet

context "math()"
snippet '([A-Za-z])_([^\{ ][^^$ ]+)([ \^])' "auto subscipt" irA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
endsnippet


snippet '([A-Za-z](?:_\{?[^^\{ ]+\}?)?)\^([^^\{\} ]+) ' "auto superscrpit" irA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet

snippet bb "mathbb" i
\mathbb{$1}$0
endsnippet

snippet ds "mathds" i
\mathds{$1}$0
endsnippet

context "math()"
snippet src "mathsrc" i
\mathsrc{$1}$0
endsnippet

context "math()"
snippet '\\?bra' "bra" -irA
\bra{${1:\psi}}$0
endsnippet

context "math()"
snippet '\\?ket' "ket" -irA
\ket{${1:\psi}}$0
endsnippet


priority 2

context "math()"
snippet '\\bra\{ket' "braket" -irA
\braket{${1:\psi}$0
endsnippet

context "math()"
snippet '\\ket\{bra' "ketbra" -irA
\ketbra{${1:\psi}$0
endsnippet

priority 1


context "math()"
snippet '\\?mel' "matrix element" -irA
\mel{${1:\psi}}{${2:H}}{${3:\psi}}$0
endsnippet

snippet '\\?ip (.+) (.+) ' "commutator auto" irA
\ip{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`} 
endsnippet

priority 2

# snippet '\bra\{ket\}' "braket" irA
# \braket{$1}$0
# endsnippet

priority 1

snippet co "commutator" i
[$1, $2] $0
endsnippet

context "math()"
snippet 'com (.+) (.+) ' "commutator auto" irA
[`!p snip.rv = match.group(1)`, `!p snip.rv = match.group(2)`] 
endsnippet

priority 2
context "math()"
snippet 'acom (.+) (.+) ' "anticommutator auto" irA
\\\{`!p snip.rv = match.group(1)`, `!p snip.rv = match.group(2)`\\\} 
endsnippet

priority 1

context "math()"
snippet '\\?frac (.+) (.+) ' "fraction auto" irA
\frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`} 
endsnippet

context "math()"
snippet '\\?dv( ([0-9]+))? ([^\d].*) (.+) ' "derivative" irA
\dv`!p snip.rv = '['+match.group(2)+']' if not match.group(2) is None else ''`{`!p snip.rv = match.group(3)`}{`!p snip.rv = match.group(4)`} 
endsnippet

priority 2

snippet '\\?pdv( ([0-9]+))? ([^\d].*) (.+) ' "derivative" irA
\pdv`!p snip.rv = '['+match.group(2)+']' if not match.group(2) is None else ''`{`!p snip.rv = match.group(3)`}{`!p snip.rv = match.group(4)`} 
endsnippet

priority 1

snippet '\\?sqrt ?([0-9]+) ' "sqrt auto" irA
\sqrt{`!p snip.rv = match.group(1)`} 
endsnippet

snippet u "underline"
\underline{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet 'bb ([A-Z]+) ([0-9]+) ' "Description" irA
\mathbb{`!p snip.rv = match.group(1)`}^{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet 'ds ([A-Z]+) ([0-9]+) ' "Description" irA
\mathds{`!p snip.rv = match.group(1)`}^{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet 'cal([A-Za-z])' "mathcal" irA
\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet 'scr([A-Za-z])' "mathcal" irA
\mathscr{`!p snip.rv = match.group(1)`}
endsnippet

snippet eval "evalulation" i
\eval{${1:${VISUAL}}}_{$2} $0
endsnippet

snippet '\\?vb' "vector bold auto" irA
\vb{$1}$0
endsnippet

snippet '(\\vb\{.\})' "vector bold auto part 2" irA
`!p snip.rv = match.group(1) + "allo"`$1
endsnippet

snippet '\\?Vb' "vector bold auto" irA
\vec{$1}$0
endsnippet

snippet '(\\Vb\{.\})' "vector bold auto part 2" irA
`!p snip.rv = match.group(1) + "allo"`$1
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet "\^?dag" "complex comjugate transpose" irA
^{\dagger}
endsnippet

context "math()"
snippet star "star" iA
^{*}
endsnippet

context "math()"
snippet tt "transpose" iA
^t
endsnippet

context "math()"
snippet id "identity" i
\mathds{1}
endsnippet

snippet un "underbraces" i
\underbrace{${VISUAL}}_{$2} $0
endsnippet

snippet _t "text subscribt" i
_{\text{$1}} $0
endsnippet

snippet ddd "dot product" iA
\cdot 
endsnippet

snippet tcol "tcolorbox" 
\begin{tcolorbox}[title=$1]
	${2:${VISUAL}} 
\end{tcolorbox}
$0
endsnippet

snippet "\\?norm([0-9]+)?" "norme" ir
\norm{${1:${VISUAL}}}`!p snip.rv = "^{"+ match.group(1) + "}" if not match.group(1) is None else " "`$0
endsnippet

snippet "\\?abs([0-9]+)?" "abosule" ir
\abs{${1:${VISUAL}}}`!p snip.rv = "^{"+ match.group(1) + "}" if not match.group(1) is None else " "`$0
endsnippet

context "math()"
snippet ... "three dots mathmode" iA
\dotsb
endsnippet

snippet elem "matrix element" i
\bra{$1}$2\ket{$3}$0
endsnippet

snippet '\\?varp' "fast varphi" irA
\varphi
endsnippet

snippet exp "exponential" i
e^{$1}$0
endsnippet

context "math()"
snippet `ord(.)` "order" irA
^{(`!p snip.rv = match.group(1)`)}$0
endsnippet

snippet can "cancel"
\cancel{${1:${VISUAL}}}
endsnippet

snippet cant "cancelto"
\cancelto{${2:0}}{${1:${VISUAL}}}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

context "math()"
snippet del "partial ou del" i
\partial$0
endsnippet

context "math()"
snippet set "set" iA
\\{ $1 \\} $0
endsnippet

context "math()"
snippet dd "derivative d" i
\dd $0
endsnippet

context "math()"
snippet "dd (\d+) (.+) " "derivative d" irA
\dd^{`!p snip.rv = match.group(1)`}`!p snip.rv = match.group(2)`$0
endsnippet

context "math()"
snippet ox "otimes" A
\otimes
endsnippet

context "math()"
snippet o+ "oplus" iA
\oplus
endsnippet

snippet count "setcounter" 
\setcounter{${1:section}}{$2}
$0
endsnippet

snippet xra "arrow with stuff" iA 
\xrightarrow{$1}$0
endsnippet

snippet === "'triple' equality" iA 
\equiv$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(simplify(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + '))')
`
endsnippet


# ====================

priority -1

snippet n "nothing but like something tho" i
{}
endsnippet

snippet t "text" i
\text{${1:${VISUAL}}} $0
endsnippet

snippet 'v(.)' "other vector bold" ir
\vb{`!p snip.rv = match.group(1)`}$0
endsnippet

snippet 'V(.)' "other vector bold" ir
\vec{`!p snip.rv = match.group(1)`}$0
endsnippet

# common mistakes ==========

priority 1

snippet simga "sigma" iA
sigma
endsnippet

snippet espilon "epsilon" iA
epsilon
endsnippet

context "math()"
snippet hat "\hat" iA
\hat
endsnippet
	
context "math()"
snippet 'sbf (.+) ' "boldsymbol" irA
\boldsymbol{`!p snip.rv = match.group(1)`}$0
endsnippet

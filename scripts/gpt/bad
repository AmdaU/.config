#!/bin/python
import requests
import json
import sys
import argparse
import os
from random import choice

script_dir = os.path.dirname(os.path.realpath(__file__))

numers_of_tries = 3;
api_key = "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"
endpoint = "https://api.openai.com/v1/chat/completions"


class bad_response(Exception):
    pass

# Load 'parameters'
badness_types = {}
with open(f'{script_dir}/badness.json') as read:
    badness_types = json.load(read)
type_list = list(badness_types)

# Argument parsing
parser = argparse.ArgumentParser()

parser.add_argument('type',
                    help=f'type of badness. Can be one of: {type_list}',
                    default=choice(type_list), nargs='?')
parser.add_argument('-T', help='temperature', default=1.5, type=float)
parser.add_argument('-m', help='max tokens', default=100, type=int)

args = parser.parse_args()

if args.type not in type_list:
    raise (Exception(f"type in not one of {type_list}"))


# The data to send to the API
data = {
    "model": "gpt-4",
    "messages": [{
        "role": "system",
        "content": badness_types[args.type]['prompt']
    }],
    "max_tokens": args.m,
    "temperature": args.T,
}

# The headers for the API request
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {api_key}"
}

# Send the API request
def send_request():
    # try:
    response = requests.post(endpoint,
                            headers=headers,
                            data=json.dumps(data),
                            timeout=5)
    # except requests.exceptions.Timeout:
        # print("Humm... Drink bleach?")
        # sys.exit(1)
    # Get the generated text from the API response

    # Print the generated text
    if 'choices' in response.json():
        message = response.json()['choices'][0]['message']['content']\
            .replace('\n', '').replace('"', '')
        return message
    else:
        raise()

for i in range(numers_of_tries):
    try:
        print(send_request())
        break
    except requests.exceptions.Timeout:
        sys.exit(1)
    except bad_response:
        sys.exit(1)
